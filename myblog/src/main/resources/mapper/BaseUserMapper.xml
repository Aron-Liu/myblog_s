<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sinsoled.myblog.mapper.BaseUserMapper">
  <resultMap id="BaseResultMap" type="com.sinsoled.myblog.model.BaseUser">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    <!--@Table `base_user`-->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="state_flag" jdbcType="INTEGER" property="state_flag" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="order_flag" jdbcType="INTEGER" property="order_flag" />
    <result column="delete_flag" jdbcType="INTEGER" property="delete_flag" />
    <result column="create_time" jdbcType="TIMESTAMP" property="create_time" />
    <result column="update_time" jdbcType="TIMESTAMP" property="update_time" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    `id`, `state_flag`, `username`, `password`, `order_flag`, `delete_flag`, `create_time`, 
    `update_time`
  </sql>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    update `base_user`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="`state_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.state_flag,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="`username` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.username,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="`password` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.password,jdbcType=VARCHAR}
        </foreach>
      </trim>
      <trim prefix="`order_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.order_flag,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="`delete_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.delete_flag,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="`create_time` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.create_time,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
      <trim prefix="`update_time` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when `id` = #{item.id,jdbcType=VARCHAR} then #{item.update_time,jdbcType=TIMESTAMP}
        </foreach>
      </trim>
    </trim>
    where `id` in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=VARCHAR}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    update `base_user`
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="`state_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.state_flag != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.state_flag,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="`username` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.username != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.username,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="`password` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.password != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.password,jdbcType=VARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="`order_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.order_flag != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.order_flag,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="`delete_flag` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.delete_flag != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.delete_flag,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="`create_time` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.create_time != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.create_time,jdbcType=TIMESTAMP}
          </if>
        </foreach>
      </trim>
      <trim prefix="`update_time` = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.update_time != null">
            when `id` = #{item.id,jdbcType=VARCHAR} then #{item.update_time,jdbcType=TIMESTAMP}
          </if>
        </foreach>
      </trim>
    </trim>
    where `id` in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=VARCHAR}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    insert into `base_user`
    (`id`, `state_flag`, `username`, `password`, `order_flag`, `delete_flag`, `create_time`, 
      `update_time`)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=VARCHAR}, #{item.state_flag,jdbcType=INTEGER}, #{item.username,jdbcType=VARCHAR}, 
        #{item.password,jdbcType=VARCHAR}, #{item.order_flag,jdbcType=INTEGER}, #{item.delete_flag,jdbcType=INTEGER}, 
        #{item.create_time,jdbcType=TIMESTAMP}, #{item.update_time,jdbcType=TIMESTAMP})
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="com.sinsoled.myblog.model.BaseUser">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    insert into `base_user`
    (`id`, `state_flag`, `username`, `password`, `order_flag`, `delete_flag`, `create_time`, 
      `update_time`)
    values
    (#{id,jdbcType=VARCHAR}, #{state_flag,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{order_flag,jdbcType=INTEGER}, #{delete_flag,jdbcType=INTEGER}, 
      #{create_time,jdbcType=TIMESTAMP}, #{update_time,jdbcType=TIMESTAMP})
    on duplicate key update 
    `id` = #{id,jdbcType=VARCHAR}, 
    `state_flag` = #{state_flag,jdbcType=INTEGER}, 
    `username` = #{username,jdbcType=VARCHAR}, 
    `password` = #{password,jdbcType=VARCHAR}, 
    `order_flag` = #{order_flag,jdbcType=INTEGER}, 
    `delete_flag` = #{delete_flag,jdbcType=INTEGER}, 
    `create_time` = #{create_time,jdbcType=TIMESTAMP}, 
    `update_time` = #{update_time,jdbcType=TIMESTAMP}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="com.sinsoled.myblog.model.BaseUser">
    <!--@mbg.generated generated on Thu Mar 18 21:50:06 CST 2021.-->
    insert into `base_user`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        `id`,
      </if>
      <if test="state_flag != null">
        `state_flag`,
      </if>
      <if test="username != null">
        `username`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="order_flag != null">
        `order_flag`,
      </if>
      <if test="delete_flag != null">
        `delete_flag`,
      </if>
      <if test="create_time != null">
        `create_time`,
      </if>
      <if test="update_time != null">
        `update_time`,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="state_flag != null">
        #{state_flag,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="order_flag != null">
        #{order_flag,jdbcType=INTEGER},
      </if>
      <if test="delete_flag != null">
        #{delete_flag,jdbcType=INTEGER},
      </if>
      <if test="create_time != null">
        #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="update_time != null">
        #{update_time,jdbcType=TIMESTAMP},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        `id` = #{id,jdbcType=VARCHAR},
      </if>
      <if test="state_flag != null">
        `state_flag` = #{state_flag,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        `username` = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="order_flag != null">
        `order_flag` = #{order_flag,jdbcType=INTEGER},
      </if>
      <if test="delete_flag != null">
        `delete_flag` = #{delete_flag,jdbcType=INTEGER},
      </if>
      <if test="create_time != null">
        `create_time` = #{create_time,jdbcType=TIMESTAMP},
      </if>
      <if test="update_time != null">
        `update_time` = #{update_time,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

    <select id="getUserByUsername" resultType="com.sinsoled.myblog.dto.LoginUser">
        select id,
               state_flag,
               username,
               password
        from base_user a
        where a.username = #{username,jdbcType=VARCHAR} and a.delete_flag = 0
    </select>

</mapper>